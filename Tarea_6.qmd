---
title: "Tarea 6. Ecuaciones diferenciales ordinarias."
author: "Jessica Jeanette Espinosa Martinez"
format: 
  html:
    grid: 
      body-width: 1000px
editor: visual
jupyter: python3
---

Packages requeridos:

```{python}
#| code-fold: true

import numpy as np
import matplotlib.pyplot as plt
#Para instalar plotly hay que escribir en la terminal: py -m pip install plotly
import plotly.graph_objects as go
from scipy import integrate
import numpy as np
from scipy.integrate import solve_ivp
```

# Ejercicio 1

La Ley de Enfriamiento de Newton establece que la tasa de enfriamiento de un objeto es proporcional a la diferencia de temperatura entre el objeto y su entorno. Supongamos que $t$ es el tiempo, $T$ es la temperatura del objeto, y $T_s$ es la temperatura del entorno. La siguiente ecuación diferencial describe la Ley de Newton:

$$
\frac{dT}{dt} = k(T - T_s),
$$

donde $k$ es una constante.

Consideramos una taza de café a 95 °C en una habitación de 18 °C. Se sabe que el café se enfría a una razón de 2 °C/min cuando su temperatura es de 70 °C. Calcula el valor de la constante $k$ y brinda una gráfica de la solución de la ecuación diferencial.

A partir de los datos tenemos que la temperatura del entorno $T_s=18°C$, la cual es considerada constante. Además,

$$
\frac{dT}{dt} = 2°C/min\qquad \text{cuando} \qquad T=70°C
$$ luego,

$$
k = \frac{1}{T-T_s}\frac{dT}{dt}= \frac{1}{70-18}\,2 = -\frac{1}{26}
$$

Por lo tanto, el problema con valor inicial cuya solución se aproximará es el siguiente:

$$
\frac{dT}{dt}=-\frac{1}{26}(T-18)\qquad T(0)=95°C
$$

A continuación se muestra tal aproximación para $t\in[0,200]$, donde se observa que aproximadamente a partir de $t=150$ se alcanza la temperatura de equilibrio (18°C)

```{python}
#| code-fold: true
#| fig-align: 'center'

f= lambda t,y: (-1/26)*(y-18)
t0 = 0
tf = 200
t_values = np.linspace(t0, tf, 1000)

edo_sol= integrate.solve_ivp(f, [t0, tf], [95], t_eval= t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="Temperatura")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 2

Brinda una aproximación de la solución del siguiente problema con valor inicial.

$$
y' = t -ty, \qquad y(1)=0.
$$

# Ejercicio 3

Para la siguiente ecuación diferencial ordinaria de segundo orden con valores iniciales

$$
u''-3u'-1.5 u= 8\,sen(3t), \qquad u(1)=-0.5, u'(1)=1
$$

Escribe el respectivo sistema de ecuaciones diferenciales de primer orden considerando que $v=u'(t)$ (velocidad) y posteriormente brinda la solución del sistema por medio de las funciones $u(t)$ y $v(t)$

Para expresar la ecuación de segundo orden en un sistema de dos ecuaciones diferenciales de primer orden, consideramos la velocidad como $v(t)=u'(t)$, luego, $v'(t)=u''(t)$, al despejar $u''(t)$ y sustituyendo las igualdades descritas tenemos:

$$
v'(t)= u''(t)= 18\,sen(3t)-3u'-1.5u=18\,sen(3t)-3v-1.5u
$$

Luego, el sistema de ecuaciones diferenciales es,

$$
\begin{cases}
u'  = v\\
v'  = 18\,sen(3t)-3v-1.5u
\end{cases}
$$

con las condiciones iniciales $u(1)=0.5$, $v(1)=1$

```{python}
#| code-fold: true

def f(t, U):
  u, v = U
  return[v, 3*v+1.5*u +8*np.sin(3*t)]


t0 = 1
tf = 2
s0 = np.array([-0.5, 1])
t_values = np.linspace(t0, tf, 1000)

edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval= t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="u(t)")
plt.plot(t_values, edo_sol.y[1], label="v(t)")
plt.grid()
plt.legend()
plt.show()
```

<br>

Para cada uno de las ecuaciones diferenciles ordinarias de segundo y tercer orden con valores iniciales de los ejercicios 4 al 18, encuentra el respectivo sistema de primer orden y aproxima la solución, brinda gráficas de cada una de las funciones que resulten del sistema.

# Ejercicio 4

**Oscilador armónico simple**

$$
y'' + 4y = 0,\quad y(0) = 1,\ y'(0) = 0
$$

```{python}
def oscilador(t, u):
    u1, u2 = u
    du1dt = u2
    du2dt = -4 * u1
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [1, 0]

# Intervalo de tiempo
t_span = (0, 10)
t_eval = np.linspace(*t_span, 500)

# Resolver
sol = solve_ivp(oscilador, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]

# Graficar
plt.figure(figsize=(10,5))
plt.plot(t, y, label="y(t)")
plt.plot(t, yp, label="y'(t)")
plt.title("Oscilador Armónico Simple")
plt.xlabel("Tiempo")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.show()
```


# Ejercicio 5

**Oscilador amortiguado**

$$
y'' + 0.5y' + 4y = 0,\quad y(0) = 2,\ y'(0) = 0
$$

```{python}
def oscilador_amortiguado(t, u):
    u1, u2 = u
    du1dt = u2
    du2dt = -0.5 * u2 - 4 * u1
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [2, 0]

# Intervalo de tiempo
t_span = (0, 20)
t_eval = np.linspace(*t_span, 1000)

# Resolver
sol = solve_ivp(oscilador_amortiguado, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]

# Graficar
plt.figure(figsize=(10,5))
plt.plot(t, y, label="y(t) - posición")
plt.plot(t, yp, label="y'(t) - velocidad")
plt.title("Oscilador Armónico Amortiguado")
plt.xlabel("Tiempo")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.show()
```


# Ejercicio 6

**Oscilador forzado**

$$
y'' + 2y' + y = \cos(t),\quad y(0) = 0,\ y'(0) = 1
$$

```{python}
def oscilador_forzado(t, u):
    u1, u2 = u
    du1dt = u2
    du2dt = np.cos(t) - 2 * u2 - u1
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [0, 1]

# Intervalo de integración
t_span = (0, 20)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(oscilador_forzado, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]

# Graficar resultados
plt.figure(figsize=(10,5))
plt.plot(t, y, label="y(t) - posición")
plt.plot(t, yp, label="y'(t) - velocidad")
plt.title("Oscilador Forzado Amortiguado")
plt.xlabel("Tiempo")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.show()
```


# Ejercicio 7

**Ecuación no lineal de segundo orden**

$$
y'' = -y^3 + \cos(t),\quad y(0) = 0,\ y'(0) = 0
$$

```{python}
def ecuacion_nolineal(t, u):
    u1, u2 = u
    du1dt = u2
    du2dt = -u1**3 + np.cos(t)
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [0, 0]

# Intervalo de integración
t_span = (0, 20)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(ecuacion_nolineal, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]

# Graficar resultados
plt.figure(figsize=(10,5))
plt.plot(t, y, label="y(t)")
plt.plot(t, yp, label="y'(t)")
plt.title("Ecuación No Lineal de Segundo Orden")
plt.xlabel("Tiempo")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.show()
```


# Ejercicio 8

**Amortiguamiento cuadrático**

$$
y'' + y'^2 + y = 0,\quad y(0) = 1,\ y'(0) = -1
$$

```{python}
def amortiguamiento_cuadratico(t, u):
    u1, u2 = u
    du1dt = u2
    du2dt = -u2**2 - u1
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [1, -1]

# Intervalo de integración
t_span = (0, 15)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(amortiguamiento_cuadratico, t_span, u0, t_eval=t_eval)

# Extraer resultados
t = sol.t
y = sol.y[0]
yp = sol.y[1]

# Graficar resultados
plt.figure(figsize=(10,5))
plt.plot(t, y, label="y(t) - posición")
plt.plot(t, yp, label="y'(t) - velocidad")
plt.title("Oscilador con Amortiguamiento Cuadrático")
plt.xlabel("Tiempo")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.show()
```


# Ejercicio 9

**Péndulo simple (no lineal)**

$$
\theta'' + \sin(\theta) = 0,\quad \theta(0) = \frac{\pi}{4},\ \theta'(0) = 0
$$

```{python}
def pendulo_simple(t, u):
    theta, omega = u
    dtheta_dt = omega
    domega_dt = -np.sin(theta)
    return [dtheta_dt, domega_dt]

# Condiciones iniciales
u0 = [np.pi/4, 0]

# Intervalo de tiempo
t_span = (0, 20)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(pendulo_simple, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
theta = sol.y[0]
omega = sol.y[1]

# Graficar ángulo y velocidad angular
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, theta, label=r'$\theta(t)$')
plt.plot(t, omega, label=r'$\theta\'(t)$')
plt.title("Péndulo simple no lineal")
plt.xlabel("Tiempo")
plt.ylabel("Ángulo / Velocidad angular")
plt.legend()
plt.grid(True)

plt.subplot(1,2,2)
plt.plot(theta, omega)
plt.title("Plano fase: $\omega$ vs $\theta$")
plt.xlabel(r'$\theta$')
plt.ylabel(r'$\omega$')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 10

**Circuito RLC**

$$
LQ'' + RQ' + \frac{1}{C}Q = V(t),\quad Q(0) = 0,\ Q'(0) = 0,\quad V(t) = \sin(t)
$$

```{python}
# Parámetros del circuito
L = 1.0
R = 0.5
C = 1.0

def circuito_RLC(t, u):
    u1, u2 = u
    V_t = np.sin(t)
    du1dt = u2
    du2dt = (V_t - R * u2 - (1/C) * u1) / L
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [0, 0]

# Intervalo de tiempo
t_span = (0, 20)
t_eval = np.linspace(*t_span, 1000)

# Resolver
sol = solve_ivp(circuito_RLC, t_span, u0, t_eval=t_eval)

# Extraer resultados
t = sol.t
Q = sol.y[0]
dQdt = sol.y[1]

# Graficar carga y corriente
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, Q, label="Carga Q(t)")
plt.title("Carga en el condensador")
plt.xlabel("Tiempo")
plt.ylabel("Carga")
plt.grid(True)
plt.legend()

plt.subplot(1,2,2)
plt.plot(t, dQdt, label="Corriente I(t) = Q'(t)", color='orange')
plt.title("Corriente en el circuito")
plt.xlabel("Tiempo")
plt.ylabel("Corriente")
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()
```


Consideramos la corriente como la derivada de la carga, es decir $I(t)=Q'(t)$, por lo tanto $I'(t)=Q''(t)$, al despejar la segunda derivada de la carga de la ecuación diferencial de segundo orden y al llevar las sustituciones descritas se obtiene el siguiente sistema de primer orden,

$$
\begin{cases}
Q' = I\\
I' = \frac{1}{L} \left( sen(t) - R\, I-\frac{Q}{C} \right)
\end{cases}
$$

con las condiciones iniciales $Q(0)=0, I(0)=0$.

```{python}
#| code-fold: true

def f(t, Q, L, R, C):
  q, i = Q
  return[i, (1/L)*(np.sin(t)-R*i-q/C)]


t0 = 0
tf = 50
s0 = np.array([0, 0])
t_values = np.linspace(t0, tf, 10000)

L = 0.5
R = 2
C = 5

edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval= t_values, args = (L, R, C))

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="Q(t)")
plt.plot(t_values, edo_sol.y[1], label="I(t)")
plt.grid()
plt.legend()
plt.show()
```

Trayectoria

```{python}
#| code-fold: true

plt.figure(figsize=(8,6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 11

**Ecuación de Bessel aproximada**

$$
x^2y'' + xy' + (x^2 - 1)y = 0,\quad y(1) = 0.5,\ y'(1) = -0.1
$$

```{python}
def bessel_aproximada(x, u):
    u1, u2 = u
    if x == 0:  # evitar división por cero
        return [u2, 0]
    du1dx = u2
    du2dx = -(x * u2 + (x**2 - 1) * u1) / (x**2)
    return [du1dx, du2dx]

# Condiciones iniciales
x0 = 1
u0 = [0.5, -0.1]

# Intervalo de integración, x > 0
x_span = (1, 10)
x_eval = np.linspace(*x_span, 1000)

# Resolver
sol = solve_ivp(bessel_aproximada, x_span, u0, t_eval=x_eval, vectorized=False)

# Extraer solución
x_vals = sol.t
y_vals = sol.y[0]
yp_vals = sol.y[1]

# Graficar resultados
plt.figure(figsize=(10,5))
plt.plot(x_vals, y_vals, label="y(x)")
plt.plot(x_vals, yp_vals, label="y'(x)")
plt.title("Solución aproximada de la ecuación de Bessel (orden 1)")
plt.xlabel("x")
plt.ylabel("Amplitud")
plt.grid(True)
plt.legend()
plt.show()
```


# Ejercicio 12

**No lineal con exponencial**

$$
y'' + y e^y = \sin(t),\quad y(0) = 0,\ y'(0) = 1
$$

```{python}
def sistema_nolineal_exp(t, u):
    u1, u2 = u
    du1dt = u2
    du2dt = np.sin(t) - u1 * np.exp(u1)
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [0, 1]

# Intervalo de integración
t_span = (0, 15)
t_eval = np.linspace(*t_span, 1000)

# Resolver sistema
sol = solve_ivp(sistema_nolineal_exp, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]

# Graficar
plt.figure(figsize=(10,5))
plt.plot(t, y, label="y(t)")
plt.plot(t, yp, label="y'(t)")
plt.title("Solución de ecuación no lineal con exponencial")
plt.xlabel("Tiempo")
plt.ylabel("Amplitud")
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 13

**Cuerda con fuerza externa**

$$
y'' = -\pi^2 y + \cos(2\pi t),\quad y(0) = 1,\ y'(0) = 0
$$

```{python}
def cuerda_fuerza_externa(t, u):
    u1, u2 = u
    du1dt = u2
    du2dt = - (np.pi**2) * u1 + np.cos(2 * np.pi * t)
    return [du1dt, du2dt]

# Condiciones iniciales
u0 = [1, 0]

# Intervalo de integración
t_span = (0, 5)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(cuerda_fuerza_externa, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]

# Graficar resultados
plt.figure(figsize=(10,5))
plt.plot(t, y, label='y(t)')
plt.plot(t, yp, label="y'(t)")
plt.title('Solución para cuerda con fuerza externa')
plt.xlabel('Tiempo')
plt.ylabel('Amplitud')
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 14

**EDO homogénea de tercer orden**

$$
y''' - 3y'' + 3y' - y = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 1
$$

```{python}
def edo_tercer_orden(t, u):
    u1, u2, u3 = u
    du1dt = u2
    du2dt = u3
    du3dt = 3*u3 - 3*u2 + u1
    return [du1dt, du2dt, du3dt]

# Condiciones iniciales
u0 = [1, 0, 1]

# Intervalo de integración
t_span = (0, 5)
t_eval = np.linspace(*t_span, 1000)

# Resolver sistema
sol = solve_ivp(edo_tercer_orden, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]
ypp = sol.y[2]

# Graficar
plt.figure(figsize=(10,6))
plt.plot(t, y, label='y(t)')
plt.plot(t, yp, label="y'(t)")
plt.plot(t, ypp, label="y''(t)")
plt.title("Solución de EDO homogénea de tercer orden")
plt.xlabel("Tiempo")
plt.ylabel("Valores")
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 15

**EDO de tercer orden con término no lineal**

$$
y''' + y^2 = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 0
$$

```{python}
def edo_tercer_orden_nolineal(t, u):
    u1, u2, u3 = u
    du1dt = u2
    du2dt = u3
    du3dt = - u1**2
    return [du1dt, du2dt, du3dt]

# Condiciones iniciales
u0 = [1, 0, 0]

# Intervalo de integración
t_span = (0, 10)
t_eval = np.linspace(*t_span, 1000)

# Resolver sistema
sol = solve_ivp(edo_tercer_orden_nolineal, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]
ypp = sol.y[2]

# Graficar resultados
plt.figure(figsize=(10,6))
plt.plot(t, y, label="y(t)")
plt.plot(t, yp, label="y'(t)")
plt.plot(t, ypp, label="y''(t)")
plt.title("Solución de EDO de tercer orden no lineal")
plt.xlabel("Tiempo")
plt.ylabel("Valores")
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 16

**Oscilador cúbico forzado**

$$
y''' + y'' + y^3 = \cos(t),\quad y(0) = 0,\ y'(0) = 1,\ y''(0) = 0
$$

```{python}
#| code-fold: true

def f(t, U):
  u1, u2, u3 = U
  return[u2, u3, np.cos(t)-u3 -u1 ** 3]


t0 = 0
tf = 5
s0 = np.array([0, 1, 0])
t_values = np.linspace(t0, tf, 1000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="y(t)")
plt.plot(t_values, edo_sol.y[1], label ="y'(t)")
plt.plot(t_values, edo_sol.y[2], label ="y''(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 17

**Ecuación tipo dispersión (Korteweg-de Vries simplificada)**

$$
y''' - 6yy' = 0,\quad y(0) = 2,\ y'(0) = 0,\ y''(0) = -1
$$

```{python}
def kdv_simplificada(t, u):
    u1, u2, u3 = u
    du1dt = u2
    du2dt = u3
    du3dt = 6 * u1 * u2
    return [du1dt, du2dt, du3dt]

# Condiciones iniciales
u0 = [2, 0, -1]

# Intervalo de integración
t_span = (0, 5)
t_eval = np.linspace(*t_span, 1000)

# Resolver sistema
sol = solve_ivp(kdv_simplificada, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]
ypp = sol.y[2]

# Graficar resultados
plt.figure(figsize=(10,6))
plt.plot(t, y, label="y(t)")
plt.plot(t, yp, label="y'(t)")
plt.plot(t, ypp, label="y''(t)")
plt.title("Solución aproximada de ecuación tipo KdV simplificada")
plt.xlabel("Tiempo")
plt.ylabel("Valores")
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 18

**Modelo no lineal de conducción**

$$
y''' = -y y'' + y',\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = -1
$$

```{python}
def modelo_conduccion_nolineal(t, u):
    u1, u2, u3 = u
    du1dt = u2
    du2dt = u3
    du3dt = - u1 * u3 + u2
    return [du1dt, du2dt, du3dt]

# Condiciones iniciales
u0 = [1, 0, -1]

# Intervalo de integración
t_span = (0, 10)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(modelo_conduccion_nolineal, t_span, u0, t_eval=t_eval)

# Extraer solución
t = sol.t
y = sol.y[0]
yp = sol.y[1]
ypp = sol.y[2]

# Graficar resultados
plt.figure(figsize=(10,6))
plt.plot(t, y, label="y(t)")
plt.plot(t, yp, label="y'(t)")
plt.plot(t, ypp, label="y''(t)")
plt.title("Solución del modelo no lineal de conducción")
plt.xlabel("Tiempo")
plt.ylabel("Valores")
plt.legend()
plt.grid(True)
plt.show()
```


# Ejercicio 19

Una persona abre una cuenta bancaria con un saldo inicial de $2000$ dólares. Sea $b(t)$ el saldo en la cuenta en el tiempo t. Así, $b(0) = 2000$. El banco paga intereses a una tasa continua del $5\%$ anual. La persona realiza depósitos en la cuenta a una tasa continua de $s(t)$ dólares por año. Supogamos que $s(0) = 500$ y que $s(t)$ está aumentando a una tasa continua del $4\%$ anual (la persona puede ahorrar más conforme aumenta su ingreso con el tiempo). Brinda el sistema de ecuaciones diferenciales ordinarias y gráfica la solución $b(t)$ y $s(t)$.

```{python}
#| code-fold: true

def f(t, X):
  x, y = X
  return[0.05*x+y, 0.04*y]


t0 = 0
tf = 5
s0 = np.array([2000, 500])
t_values = np.linspace(t0, tf, 1000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="b(t)")
plt.plot(t_values, edo_sol.y[1], label ="s(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 20

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias

\begin{eqnarray}
x'(t) & = -6 x - 3 y\\
y'(t) & = -15 x + 6y
\end{eqnarray}

donde $x(0)= 3$ y $y(0)=2$. Grafica cada una de las funciones y la trayectoria.

```{python}
# Definir el sistema
def sistema(t, U):
    x, y = U
    dxdt = -6*x - 3*y
    dydt = -15*x + 6*y
    return [dxdt, dydt]

# Condiciones iniciales
x0 = 3
y0 = 2
U0 = [x0, y0]

# Intervalo de tiempo
t_span = (0, 2)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, U0, t_eval=t_eval)

# Extraer soluciones
x = sol.y[0]
y = sol.y[1]
t = sol.t

# Gráfica de x(t) y y(t)
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, x, label='x(t)')
plt.plot(t, y, label='y(t)')
plt.title('Soluciones x(t) y y(t)')
plt.xlabel('t')
plt.ylabel('Valor')
plt.grid(True)
plt.legend()

# Gráfica de la trayectoria (x vs y)
plt.subplot(1,2,2)
plt.plot(x, y, color='purple')
plt.title('Trayectoria en el plano (x, y)')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 21

Considera la interacción de dos especies de animales en un hábitat. Considerando que las poblaciones $x(t)$ y $y(t)$ pueden ser modeladas por medio de las ecuaciones

\begin{eqnarray}
x'(t) & = 1.4 x - y\\
y'(t) & = -1.25 x + 3.4y
\end{eqnarray}

donde $x(0)=7$ y $y(0)=3$. Grafica cada una de las funciones que brindan la población de cada especie al tiempo $t$.

```{python}
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
# Definir el sistema
def sistema(t, U):
    x, y = U
    dxdt = 1.4*x - y
    dydt = -1.25*x + 3.4*y
    return [dxdt, dydt]

# Condiciones iniciales
U0 = [7, 3]

# Intervalo de tiempo
t_span = (0, 10)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, U0, t_eval=t_eval)

# Extraer resultados
t = sol.t
x = sol.y[0]
y = sol.y[1]

# Graficar x(t) y y(t)
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, x, label='x(t) - Especie 1', color='blue')
plt.plot(t, y, label='y(t) - Especie 2', color='green')
plt.title('Poblaciones de las especies a lo largo del tiempo')
plt.xlabel('Tiempo t')
plt.ylabel('Población')
plt.grid(True)
plt.legend()

# Plano de fases (trayectoria x vs y)
plt.subplot(1,2,2)
plt.plot(x, y, color='purple')
plt.title('Trayectoria en el plano de fases (x vs y)')
plt.xlabel('Población especie 1 (x)')
plt.ylabel('Población especie 2 (y)')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 22

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias,

\begin{eqnarray}
y'_1(t) & = -6.2 +1.1 y_1 - 0.8 y_2\\
y'_2(t) & = -13.8 +2.1 y_1 -1.2 y_2
\end{eqnarray}

con los valores iniciales $y_1(0)=11$, $y_2(0)=4$. Grafica cada una de las funciones y la trayectoria.

<br>

Para cada uno de los sistemas de ecuaciones diferenciales ordinarias no lineales con valor inicial grafica las funciones y las respectivas trayectorias.

```{python}
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Definir el sistema de ecuaciones
def sistema(t, Y):
    y1, y2 = Y
    dy1dt = -6.2 + 1.1*y1 - 0.8*y2
    dy2dt = -13.8 + 2.1*y1 - 1.2*y2
    return [dy1dt, dy2dt]

# Condiciones iniciales
Y0 = [11, 4]

# Intervalo de integración
t_span = (0, 10)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, Y0, t_eval=t_eval)

# Extraer soluciones
t = sol.t
y1 = sol.y[0]
y2 = sol.y[1]

# Gráfica de y1(t) y y2(t)
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, y1, label='y₁(t)', color='blue')
plt.plot(t, y2, label='y₂(t)', color='green')
plt.title('Solución de y₁(t) y y₂(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Valor')
plt.grid(True)
plt.legend()

# Trayectoria en el plano (y₁, y₂)
plt.subplot(1,2,2)
plt.plot(y1, y2, color='purple')
plt.title('Trayectoria en el plano (y₁, y₂)')
plt.xlabel('y₁')
plt.ylabel('y₂')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 23

**Sistema logístico con depredación**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy \\
\frac{dy}{dt} = -y + xy \\
x(0) = 0.9,\quad y(0) = 0.1
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, X):
  x, y = X
  return[x*(1 - x) - x*y, -y +x*y]

t0 = 0
tf = 1000
s0 = np.array([0.9, 0.1])
t_values = np.linspace(t0, tf, 1000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="x(t)")
plt.plot(t_values, edo_sol.y[1], label ="y(t)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 24

**Oscilador de Van der Pol**

$$
\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = \mu (1 - x^2)y - x \\
x(0) = 2,\quad y(0) = 0,\quad \mu = 3
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, X, mu):
  x, y = X
  return[y, mu* (1 - x**2)*y - x]


mu = 3
t0 = 0
tf = 30
s0 = np.array([2, 0])
t_values = np.linspace(t0, tf, 5000)


edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values, args= (mu,))

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label ="x(t)")
plt.plot(t_values, edo_sol.y[1], label ="y(t)")
plt.grid()
plt.legend()
plt.show()
```

Órbita

```{python}
#| code-fold: true

val_mu = np.linspace(1, 10, 5)

plt.figure(figsize=(8,6))
for mu in val_mu:
  edo_sol= integrate.solve_ivp(f, [t0, tf], s0, t_eval = t_values, args= (mu,))
  plt.plot(edo_sol.y[0], edo_sol.y[1], label = "mu= " + str(mu))
  
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 25

**Sistema de Lotka-Volterra**

$$
\begin{cases}
\frac{dx}{dt} = \alpha x - \beta xy \\
\frac{dy}{dt} = \delta xy - \gamma y \\
x(0) = 10,\quad y(0) = 5,\quad \alpha = 1.5,\ \beta = 1,\ \delta = 1,\ \gamma = 3
\end{cases}
$$
```{python}
# Parámetros
alpha = 1.5
beta = 1
delta = 1
gamma = 3

# Sistema de Lotka-Volterra
def lotka_volterra(t, z):
    x, y = z
    dxdt = alpha * x - beta * x * y
    dydt = delta * x * y - gamma * y
    return [dxdt, dydt]

# Condiciones iniciales
z0 = [10, 5]

# Intervalo de tiempo
t_span = (0, 20)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(lotka_volterra, t_span, z0, t_eval=t_eval)

# Extraer soluciones
t = sol.t
x = sol.y[0]
y = sol.y[1]

# Gráfica de poblaciones en el tiempo
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, x, label='Presa x(t)', color='tab:blue')
plt.plot(t, y, label='Depredador y(t)', color='tab:orange')
plt.title('Poblaciones en el tiempo')
plt.xlabel('Tiempo')
plt.ylabel('Población')
plt.grid(True)
plt.legend()

# Plano de fase (x vs y)
plt.subplot(1,2,2)
plt.plot(x, y, color='tab:purple')
plt.title('Trayectoria en el plano (x, y)')
plt.xlabel('Presa (x)')
plt.ylabel('Depredador (y)')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 26

**Interacción no lineal seno-coseno**

$$
\begin{cases}
\frac{dx}{dt} = \sin(y) - x^3 \\
\frac{dy}{dt} = \cos(x) - y^2 \\
x(0) = 1,\quad y(0) = 0
\end{cases}
$$

```{python}
# Definir el sistema no lineal
def sistema(t, z):
    x, y = z
    dxdt = np.sin(y) - x**3
    dydt = np.cos(x) - y**2
    return [dxdt, dydt]

# Condiciones iniciales
z0 = [1, 0]

# Intervalo de tiempo
t_span = (0, 10)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, z0, t_eval=t_eval)

# Extraer soluciones
t = sol.t
x = sol.y[0]
y = sol.y[1]

# Gráfica de x(t) y y(t)
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, x, label='x(t)', color='blue')
plt.plot(t, y, label='y(t)', color='green')
plt.title('Soluciones x(t) y y(t)')
plt.xlabel('Tiempo')
plt.ylabel('Valor')
plt.grid(True)
plt.legend()

# Trayectoria (x vs y)
plt.subplot(1,2,2)
plt.plot(x, y, color='purple')
plt.title('Trayectoria en el plano (x, y)')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 27

**FitzHugh-Nagumo (modelo de neurona)**

$$
\begin{cases}
\frac{dv}{dt} = v - \frac{v^3}{3} - w + I \\
\frac{dw}{dt} = 0.08(v + 0.7 - 0.8w) \\
v(0) = -1,\quad w(0) = 1,\quad I = 0.5
\end{cases}
$$

```{python}
# Parámetro externo
I = 0.5

# Sistema de FitzHugh-Nagumo
def fhn(t, z):
    v, w = z
    dvdt = v - (v**3)/3 - w + I
    dwdt = 0.08 * (v + 0.7 - 0.8 * w)
    return [dvdt, dwdt]

# Condiciones iniciales
z0 = [-1, 1]

# Intervalo de integración
t_span = (0, 50)
t_eval = np.linspace(*t_span, 2000)

# Resolver el sistema
sol = solve_ivp(fhn, t_span, z0, t_eval=t_eval)

# Extraer soluciones
t = sol.t
v = sol.y[0]
w = sol.y[1]

# Gráficas
plt.figure(figsize=(12,5))

# v(t) y w(t)
plt.subplot(1,2,1)
plt.plot(t, v, label='v(t) - potencial', color='blue')
plt.plot(t, w, label='w(t) - recuperación', color='orange')
plt.title('Modelo FitzHugh-Nagumo')
plt.xlabel('Tiempo')
plt.ylabel('Valor')
plt.grid(True)
plt.legend()

# Plano de fases (v vs w)
plt.subplot(1,2,2)
plt.plot(v, w, color='purple')
plt.title('Trayectoria en el plano (v, w)')
plt.xlabel('v (potencial)')
plt.ylabel('w (recuperación)')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 28

**Sistema no autónomo**

$$
\begin{cases}
\frac{dx}{dt} = x \sin(t) + y^2 \\
\frac{dy}{dt} = -y \cos(t) + x \\
x(0) = 1,\quad y(0) = -1
\end{cases}
$$

```{python}
# Definir el sistema no autónomo
def sistema(t, z):
    x, y = z
    dxdt = x * np.sin(t) + y**2
    dydt = -y * np.cos(t) + x
    return [dxdt, dydt]

# Condiciones iniciales
z0 = [1, -1]

# Intervalo de integración
t_span = (0, 20)
t_eval = np.linspace(*t_span, 2000)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, z0, t_eval=t_eval)

# Extraer soluciones
t = sol.t
x = sol.y[0]
y = sol.y[1]

# Graficar x(t) y y(t)
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, x, label='x(t)', color='blue')
plt.plot(t, y, label='y(t)', color='green')
plt.title('Soluciones x(t) y y(t)')
plt.xlabel('Tiempo t')
plt.ylabel('Valor')
plt.grid(True)
plt.legend()

# Trayectoria en el plano (x vs y)
plt.subplot(1,2,2)
plt.plot(x, y, color='purple')
plt.title('Trayectoria en el plano (x, y)')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 29

**Modelo epidemiológico SIR (en este caso no graficar la trayectoria)**

$$
\begin{cases}
\frac{dS}{dt} = -\beta S I \\
\frac{dI}{dt} = \beta S I - \gamma I \\
\frac{dR}{dt} = \gamma I \\
S(0) = 0.99,\quad I(0) = 0.01,\quad R(0) = 0,\quad \beta = 0.5,\ \gamma = 0.1
\end{cases}
$$
```{python}
# Parámetros
beta = 0.5
gamma = 0.1

# Sistema SIR
def sir(t, y):
    S, I, R = y
    dSdt = -beta * S * I
    dIdt = beta * S * I - gamma * I
    dRdt = gamma * I
    return [dSdt, dIdt, dRdt]

# Condiciones iniciales
y0 = [0.99, 0.01, 0.0]

# Intervalo de tiempo
t_span = (0, 160)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(sir, t_span, y0, t_eval=t_eval)

# Extraer resultados
t = sol.t
S = sol.y[0]
I = sol.y[1]
R = sol.y[2]

# Graficar S(t), I(t), R(t)
plt.figure(figsize=(10,6))
plt.plot(t, S, label='S(t) - Susceptibles', color='blue')
plt.plot(t, I, label='I(t) - Infectados', color='red')
plt.plot(t, R, label='R(t) - Recuperados', color='green')
plt.title('Modelo Epidemiológico SIR')
plt.xlabel('Tiempo')
plt.ylabel('Fracción de la población')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
```


# Ejercicio 30

**Crecimiento logístico cruzado**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x - 0.5y) \\
\frac{dy}{dt} = y(1 - y - 0.3x) \\
x(0) = 0.5,\quad y(0) = 0.2
\end{cases}
$$

```{python}
# Sistema de crecimiento logístico cruzado
def sistema(t, z):
    x, y = z
    dxdt = x * (1 - x - 0.5 * y)
    dydt = y * (1 - y - 0.3 * x)
    return [dxdt, dydt]

# Condiciones iniciales
z0 = [0.5, 0.2]

# Intervalo de tiempo
t_span = (0, 50)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, z0, t_eval=t_eval)

# Extraer soluciones
t = sol.t
x = sol.y[0]
y = sol.y[1]

# Graficar x(t) y y(t)
plt.figure(figsize=(10,6))
plt.plot(t, x, label='x(t) - Especie 1', color='blue')
plt.plot(t, y, label='y(t) - Especie 2', color='green')
plt.title('Crecimiento logístico cruzado de dos especies')
plt.xlabel('Tiempo')
plt.ylabel('Población')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
```


# Ejercicio 31

**Movimiento en campo no lineal**

$$
\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = -\sin(x) - 0.5 y \\
x(0) = \pi/2,\quad y(0) = 0
\end{cases}
$$

```{python}
# Sistema de péndulo amortiguado
def pendulo(t, z):
    x, y = z
    dxdt = y
    dydt = -np.sin(x) - 0.5 * y
    return [dxdt, dydt]

# Condiciones iniciales
z0 = [np.pi/2, 0]

# Intervalo de integración
t_span = (0, 20)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(pendulo, t_span, z0, t_eval=t_eval)

# Extraer resultados
t = sol.t
x = sol.y[0]
y = sol.y[1]

# Graficar x(t) y y(t)
plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
plt.plot(t, x, label='x(t) - ángulo', color='blue')
plt.plot(t, y, label='y(t) - velocidad angular', color='orange')
plt.title('Péndulo amortiguado: ángulo y velocidad angular')
plt.xlabel('Tiempo')
plt.ylabel('Valor')
plt.grid(True)
plt.legend()

# Plano de fases (x vs y)
plt.subplot(1,2,2)
plt.plot(x, y, color='purple')
plt.title('Trayectoria en el plano (x, y)')
plt.xlabel('Ángulo x')
plt.ylabel('Velocidad y')
plt.grid(True)

plt.tight_layout()
plt.show()
```


# Ejercicio 32

**Sistema no lineal acoplado**

$$
\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy^2 \\
\frac{dy}{dt} = y(1 - y) - x^2y \\
x(0) = 0.8,\quad y(0) = 0.6
\end{cases}
$$

```{python}
def sistema(t, z):
    x, y = z
    dxdt = x * (1 - x) - x * y**2
    dydt = y * (1 - y) - x**2 * y
    return [dxdt, dydt]

# Condiciones iniciales
z0 = [0.8, 0.6]

# Intervalo de integración
t_span = (0, 30)
t_eval = np.linspace(*t_span, 1000)

# Resolver el sistema
sol = solve_ivp(sistema, t_span, z0, t_eval=t_eval)

# Extraer resultados
t = sol.t
x = sol.y[0]
y = sol.y[1]

# Graficar x(t) y y(t)
plt.figure(figsize=(10,6))
plt.plot(t, x, label='x(t)', color='blue')
plt.plot(t, y, label='y(t)', color='green')
plt.title('Sistema no lineal acoplado')
plt.xlabel('Tiempo')
plt.ylabel('Población / Valor')
plt.grid(True)
plt.legend()
plt.show()
```

